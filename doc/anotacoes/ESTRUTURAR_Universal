
#PRIMORDmIAL
Polo_Unico: em TUDO faça ter somente uma fonte de informacao polo unico onde se mudar na fonte muda em tudo que a usa.

objeto seed : fazer para ser primeiros registros de EXEMPLO na base de dados
objeto default : fazer para ser primeiros registros de FABRICA na APLICACAO para o Client visualizar.

valor ::
Quando um campo vai ser um objeto -> cria um struct- e o campo vai ter opcoes pode ser uma coisa ou outra faz dele um objeto enum

para ser um objeto ou outro ::
em golang: cria interface - e os tipos de obejtos apra serem de uma interface que tem metodo, estes tipos tem que ter metodo igual dessa interface.

Inteligencia :
- Adicionar Inteligência: é add funções
- Local de add inteligência é nas funções de caso de uso

:Comeco algoritmos
- Comecar criar o contrato de tipos
- use test oficial da linguagem ao inves de testers em console, assim a app ja fica garantida testada.
- Criar um input de tester para usar no test oficial - inicialmente sem objetos complexos : comece com dados primitivos
- Na funcao test - testar o caso de uso com o input
-


# ValoresDefault
valorDefault_Hardcode : Valor Default em campo de novos objetos
- crio o valorDefault_Hardcode e uso na funcao que vai criar novos objetos.
- pego o campo alvo que quero o default valor e atribuo o valorDefault_Hardcode
- no final devolvo o objeto modificado.

# Pastas
- pasta test : melhor deixar na raiz root do projeto, beneficio: é mais facil de acessar.

:Convencoes
Nomes_Arquivos_de_Test : nomea-los com o nome do que ele esta testando, ex: Test_Create_Foo.inputFoo_test

# Algoritmos
  ## Estruturar Objeto
  - modelar EntidadeModel que sera a informação completa final.
  - habitar: com os campos Request e Computed { para consumir o que vira de fora, e mostrar o que é default proprio da entidade final }

  # REPOSITORIO - GITHUB
  - Modelo_Commit : categporiaFeito: [local] <afetado> o que fez, Exemplo: refactor: [defaults] <estrofes> ok

  # METODOS
  - prometa entregar devolver um tipo
  - primeiro defina quem é o this ou seja o objeto de onde vai tirar manipular as informacoes
  - formulas : use operacoes logicas ou apenas atribuicoes para definir valores a serem usados no resultado
  - faça o resultado e devolvar retorne o que prometeu no formato do tipo que havia prometido.

# CONDICIONAIS
- Recurso : Condicionais : DAR AO USER A OPÇÃO DE DAR UM INPUT - QUE ESTEJA ENTRE AS OPCOES DISPONIVEIS EM UM OBJETO > SEM IFS

1 - Faz objDeOpcoes com metodos , onde cada nome de metodo sera o que o usuario podera escolher de input.
-- cada metodo deste tetorna o que vc quer dar de resposta ao acertar o input.
2 - faz a funcao que vai receber o input e devolver as opcoes do objDeOpcoes
 -- que recebe a escolha e retorna o objDeOpcoes [ na posicao do input recebido]() e ja auto executa porque as opcoes sao funcoes/metodos.



